// Notas de desarrollador

////// C++ No puede trabajar con acentos, corregir en version final ///////

// sustituye input integer por input string, crea nuevos diccionario para las entradas de 2 (?)
// añadir un verificador al menu 1 (poco necesario)
// arreglar outpu con 7 puntos ....... a texto
// cambiar n de outpu stat a integer (poco necesario)
// que no sea necsario que salgan barras dobles al final de la cadena completa (poco necesario)
// complementar el outpustat (poco necesario)
// añadir simbolos faltantes (en caso de ser necesario)
// regresar al amenu inicial en stats (poco necesario)

//-----------------------------------------------------------------------
//
//                    Transcriptor de Código Morse
//
//------------------------------------------------------------------------
// Codigo finalizado el día 18/8/23
// Programa desarrollado por Eduardo Bogado
// Universidad Central de Venezuela
// Github user eduardob999

//Librerías

# include <iostream>
# include <string>
using namespace std;

// Firma de procedimientos

Acción InputEntero( string prompt, Ref Entero in, Entero min, Entero max, string con);
Acción InputString( string prompt, Ref String t, Entero min, Entero max, string con, string d, Entero size);
Acción Seleccion( Ref Entero in, Ref Entero cmt, Ref String cpal, Ref Real tpal, Ref Entero nerr, Ref String morse, Ref String msg );
Acción OutputMorse( string t, string d, Ref Entero nm, Ref String np, Ref Real tp, Ref String proc);
Acción Kernel( Entero j, Ref Entero ind, string t, string d, Entero size );
Acción Cuantificador( Entero k, Ref Entero q, string t, string d );
Función Verificador( string p );
Acción OutputTexto( string t, string d, Ref Entero ne );
Acción TokenSize( Entero j, Ref Entero size, string t );
Acción OutputStats( Entero n, string cp, Real tp, Entero ne, string m, string t );

// Procedimientos

Acción Principal
    // Acá se manejan la iniciación y finalización del programa,
    // así como también, se declaran e inicializan las variables
    // compartidas entre procedimientos.

    // Declaración de variables
    Entero inp, cantmsg, nerror; 
    string menu0, cond0, cantpal, morsefinal, texto;
    Real totpal;

    cantmsg = 0;
    cantpal = "";
    totpal = 0;
    nerror = 0;
    morsefinal = "";
    texto = "";

    // Inicialización de variables
    menu0 = "\nUniversidad Central de Venezuela"
    		"\nFacultad de Ciencias"
            "\nEscuela de Computación"
            "\nAlgoritmos y Programación. Sem I-2023."
            "\nProyecto 1. Código Morse Internacional."
    		"\n"
            "\nMenú:"
            "\n  1.  Integrantes de Equipo"
            "\n  2.  Transmitir Texto en Código Morse"
            "\n  3.  Convertir Código Morse a Texto"
            "\n  4.  Estadísticas"
            "\n  5.  Salir"
            "\n"
            "\nPor favor, indique su opción:";
    cond0 = "\nDebe ingresar un número entero entre 1 y 5. "
            "\nIngrese su opción nuevamente:";

    // Procesamiento
    Repetir
        
        // En este ciclo se controla la ejecicón y salida del programa
        // la variable inp se emplea como bandera
        InputEntero( menu0 , inp , 1 , 5 , cond0 );
        Seleccion( inp , cantmsg , cantpal , totpal , nerror , morsefinal, texto );
    Hasta ( inp == 5 );
FAcción;

Acción InputEntero( string prompt , Ref Entero in , Entero min , Entero max , string con)    
    // Esta acción maneja las entradas de datos enteros incluyendo la
    // solicitud de datos y la validadción en base a una serie de
    // parámetros entre los que se incluyen los valores máximos y mínimos.
    // Declaración de cadena de entrada.
    string n;

    Escribir( prompt );
    Repetir

        // Ciclo de validación basada en valores máximos y mínimos
        // Solicitud y transformación de datos
        Leer( n ); 
        in = aEntero( n );
        Si ( No ( in >= min Y in <= max ) ) Entonces

            // Solicitud de correción personalizable.
            Escribir( con );
        FSi;
    Hasta ( in >= min Y in <= max );
FAcción;

Acción Seleccion( Ref Entero in , Ref Entero cmt , Ref String cpal, Ref Real tpal , Ref Entero nerr , Ref String morse, Ref String msg )
    // En este procedimiento se maneja el menúi de selección

    // Declaracion de variables
    string txt, dic, ver, ver2, ver3, menu1, cond1, menu2, cond2, menu3, cond3, proces;
    Entero flag;

    // Inicialización de los strings correspondientes a los textos y 
    // condiciones de cada menú.
    dic = "_a_.-_i_.._r_.-._b_-..._j_.---_s_..._c_-.-._k_-.-_t_-_d_-.._l_.-.._"
          "u_..-_e_._m_--_v_...-_è_..-.._n_-._w_.--_f_..-._o_---_x_-..-_g_--._"
          "p_.--._y_-.--_h_...._q_--.-_z_--.._ _/_error_........_1_.----_6_-...."
          "_2_..---_7_--..._3_...--_8_---.._4_....-_9_----._5_....._0_-----";
    ver = "\n¿Desea volver al menu principal?"
           "\nResponda con Sí o No:";
    ver2 = "\n¿Desea transmitir otro mensaje?"
           "\nResponda con Sí o No: ";
    ver3 = "\n¿Desea convertir otro mensaje?"
           "\nResponda con Sí o No:";
    menu1 = "\nOpción 1 - Integrantes del Equipo."
            "\n"
            "\nUniversidad Central de Venezuela"
    		"\nFacultad de Ciencias"
            "\nEscuela de Computación"
            "\nAlgoritmos y Programación. Sem I-2023."
            "\n"
            "\nEduardo Alfonso Bogado Rojas"
            "\nC.I: v-26.818.715"
            "\n"
            "\nMenú:"
            "\n"
            "\n  1.  Regresar al menú anterior"
            "\n"
            "\nPor favor, indique su opción:";
    cond1 = "\nDebe ingresar al número entero 1. "
            "\nIndique su opción nuevamente:";
    menu2 = "\nOpción 2 - Transmitir Texto en Código Morse"
            "\n"
            "\nEl mensaje no debe incluir más de 30 caracteres."
            "\nPor favor, introduzca el texto a codificar:";
    cond2 = "\nEl texto debe tener de 1 a 30 caracteres."
            "\nEvite el uso de acentos ajenos al idioma español."
            "\nSe admiten solo caracteres incluidos en la convención ITU-RM.1677-1"
            "\nPor favor, introduzca nuevamente el texto a codificar:";
    menu3 = "\nOpción 3 - Convertir Código Morse en Texto Normal"
            "\n"
            "\nEl mensaje no debe incluir más de 50 caracteres."
            "\nSe admiten solo caracteres incluidos en la convención ITU-RM.1677-1"
            "\nPor favor, introduzca la codificación:";
    cond3 = "\nEl texto debe tener de 1 a 50 caracteres."
            "\nEl punto, señal corta o dot viene dado por el caracter \".\"."
            "\nLa línea, señal larga o dash viene dado por el caracter \"-\"."
            "\nLas letras deben ir separadas por espacios."
            "\nLas palabras vienen separadas por el caracter \"/\"."
            "\nPor favor, introduzca la codificación nuevamente: ";

    // Selección correspoendiente a las opciones del menú.
    Selección 
    in == 1:

        // Opción 1 - Identificación del equipo.
        InputEntero( menu1 , in , 1 , 1 , cond1 );
    in == 2:

        // Opción 2 - Codificación de texto a código morse.
        Repetir

            // Este ciclo permite la reutilización del menú
            // sin neecesidad de volver al menú inicial.
            // El procesamiento y traducción de la entrada es llevada a
            // cabo por la fucnión OutputMorse.
            InputString( menu2, txt, 1, 30, cond2, dic, 1 );
            OutputMorse( txt, dic, cmt, cpal, tpal, proces );
            msg = msg + txt + " ";
            morse = morse + proces + " //";
        Hasta ( Verificador( ver2 ) );
    in == 3:

        // Opción 3 - Decodificación de código Morse a Texto.
        Repetir

            // Este ciclo permite la reutilización del menú
            // sin neecesidad de volver al menú inicial.
            // El procesamiento y traducción de la entrada es llevada a
            // cabo por la acción OutputTexto.
            InputString( menu3 , txt , 1 , 50 , cond3, "_._-_/_ _", 1 );
            OutputTexto( txt , dic , nerr );
        Hasta ( Verificador( ver3 ) );
    in == 4:
        
        // Opción 4 - Estadística.
        Repetir

            // Este ciclo permite la reutilización del menú
            // sin neecesidad de volver al menú inicial.
            // El procesamiento y traducción de la entrada es llevada a
            // cabo por la acción OutputStat.
            Escribir( "Opción 4 - Estadísticas" );
            OutputStats( cmt , cpal , tpal, nerr, morse, msg );
        Hasta ( No (  Verificador( ver ) ));
        
    in == 5:
        
        // Opción 5 - Salida y resumen de actividad.
        // Se reutiliza la acción OutputStat para mostrar
        // el resumen de actividad.
        Escribir( "Opción 5 - Salir. A continuación un resumen de su actividad:" );
        OutputStats( cmt , cpal , tpal, nerr, morse, msg );
        Escribir( "Gracias por usar este programa." );
        in = 5;
    FSelección;
FAcción;

Acción InputString( string prompt , Ref String t , Entero min , Entero max , string con, string d, Entero size )

    // Esta acción manea todas las entradas de dato tipo string.
    // Se incluye solicitud de datos y validación.
    // Este procedmiento se diseño con la finalidad de ser altamente
    // reutilizable.

    // Declaración de variables.
    Entero ind, flag, i;

    // Procesamiento: Se comienzo mostrarndo el mensaje de solicitud
    // El mensaje de solicitud se obtiene como parametro.
    Escribir( prompt );
    Repetir

        // Este ciclo es un ciclo de validación.
        // Inicialización de contadores.
        flag = 0; i = 0;

        // Procesamiento: se comienza solicitando el texto de entrada.
        Leer( t );
        Repetir

            // Este ciclo verifica cada letra de la entrada
            // el kernel es una acción que permite identificar la
            // posición relativa de un caracter en una cadena.
            Kernel( i + 1, ind , t , d , size );
            Si (No ( ( Longitud(t) >= min Y Longitud(t) <= max ) Y ind < Longitud(d) - 1 )) Entonces

                // En este condicional se verifica la longitud de la
                // cadena, los límites son personalizbles
                flag = -1;
            FSi;
            i = i + size + 1;
        Hasta ( i >= Longitud(t) );

        Si ( flag == -1 ) Entonces
            
            // Este condicional muestra un mensaje de corrección de ser necesario.
            Escribir( con );
        FSi;
    Hasta ( flag =/= -1 );
FAcción;

Acción OutputMorse( string t , string d , Ref Entero nm , Ref String np , Ref Real tp , Ref String proc)
  
    // Esta acción procesa las entradas de texto y las convierte en morse.
    
    // Declaración de variables.
    string selec; Entero i, ind, q, palen;

    // Inicialización de variables.
    proc = "";
    palen = 0;

    // Procesamimiento de la caena de entrada "t".
    Para i = 1 Hasta Longitud(t) Hacer

        // Este ciclo verifica cada letra de la entrada
        // se reutiliza el kernel en esta acción
        // el cuantificador determina la cantidad de carcaternes
        // que tendrá cada salida.
        Kernel( i , ind , t , d , 1 );
        Cuantificador( ind , q , t , d );

        Si ( Subcadena( d , ind + 3 , q ) == "/" O i + 1 > Longitud(t) ) Entonces
            
            // Subcadena se implementa como función primitiva 
            // Función Subcadena( String entrada, Entero inicial, Entero Cantidad ):string
            // Este ciclo cuenta la cantidad de palabras y las almacena en "palen".
            palen = palen + 1;
        FSi;
        proc = proc + Subcadena( d, ind + 3 , q ) + " ";
    FPara;

    // Procesamiento de datos intermedios.
    nm = nm + 1;
    np = np + to_string( palen ) + " ";
    tp = tp + palen;

    // Codigo morse codificado:
    Escribir( "La Codificación Morse de " + t + " es:\n" + proc);

FAcción;

Acción Kernel( Entero j, Ref Entero ind , string t , string d , Entero size )

    // El kernel identifica la ubicaciñon relativa de una cadena de caracteres en otra
    // y le asigna un índice entero.

    // Inicialización del contador principal.
    ind = 0;

    // Procesamiento y generación del índice.
    Repetir
        
        // Este ciclo encuentra el valor del índice según las coincidencias dadas.
        ind = ind + 1 ;
    Hasta (  "_" + Subcadena( t , j , size ) + "_" == Subcadena( d , ind , size + 2 ) O  ind + size > Longitud(d)  );

FAcción;

Acción Cuantificador( Entero ind , Ref Entero q , string t , string d )

    // Esta acción mide el tamaño de una subcadena en un string
    // este procedimiento es específcio de la acción OutputMorse.

    // Inicialición del contador principal.
    q = 0;
    Repetir
        
        // Este ciclo encuentra el valor del tamaño de la subcadena según las especificaciones.
        q = q + 1;
    Hasta ( ind + q + 2 > Longitud(d) O ( Subcadena( d , ind + q + 2 , 1 ) =/= "." Y Subcadena( d, ind + q + 2 , 1 ) =/= "-"  Y Subcadena( d , ind + q + 2 , 1 ) =/= "/" ) );
    q = q - 1;
FAcción;
         
Función Verificador( string p )
    // Función reutlizable empleada para determinar la condición de salida
    // de un ciclo con finalidad de reutilizar una serie de
    // procedimeintos.

    // Declaraciónes de variables.
    string cond, ans, acc, rej; Entero sind, nind, flag;

    // Inicialización de variables.
    acc = "_SI_Si_sI_si_Sí_sÍ_SÍ_sí_";
    rej = "_No_nO_NO_no_";
    cond = "\nDebe responder con Sí o No"
           "\nIntroduzca su respuesta nuevamente: ";

    // Solicitud de entrada y procesamiento.
    Repetir

        //Este es un ciclo de validación.
        InputString( p , ans , 2 , 2 , cond, acc + rej, 2);
        Kernel( 1 , sind , ans , acc , 2);
        Kernel( 1 , nind , ans , rej , 2);
        Si ( sind < Longitud(acc) - 1 ) Entonces

            // Este condicional verifca el resultado positivo.  
            retornar Falso;
            Sino
            Si ( nind < Longitud(rej) - 1 ) Entonces

                // Este condicional verifca el resultado negativo.
                retornar Verdadero;
                Sino

                // En caso no definido se solicitan los datos nuevamente.
                Escribir(cond);
                flag = -1;
            FSi;
        FSi;
    Hasta ( flag =/= -1 );
FAcción;

Acción OutputTexto( string t , string d , Ref Entero ne )

    // Esta acción procesa las entradas de codigo morse y las convierte en
    // cadenas de caracteres con texto.
    
    // Declaración de variables.
    string prompt, cond, selec, proc; Entero i, size, ind, q, flag, errs, errind;

    // Inicialización de contadores indices y datos intermedios:
    proc = "";
    i = 0;

    // Procesa y muestra la salida.
    Repetir
        
        // Este ciclo realiza la traducción del código morse al texto.
        
        // Inicialización de flags y datos intermedios.
        // Los datos intermedios son datos que se utilizan para
        // operaciones matemáticas no se muestran al usuario sin ser
        // procesados.
        flag = 1;
        errs = 0;

        // Llamada a acciones que identifican las variables
        // TokenSize es una acción muy similar al cuantificador.
        TokenSize( i + 1 , size , t );
        Kernel( i + 1 , ind , t , d , size);

        // Verificación y corrección de errores.
        Si ( i + size + 1 < Longitud(t) ) Entonces

            // Este ciclo verifica la existencia de errores y mediante el uso de
            // flags omite a la entrada errada
            TokenSize( i + size + 2 , errs , t );
            Kernel( i + size + 2 , errind , t , d , errs);
            Si ( Subcadena( d, errind - ( 1 ) , 10 ) == "_........_" ) Entonces
                
                // Flags que permiten la eliminación y conteo de errores
                // este condicional viene dado por el carcater "error"
                flag = -1;
                i = i + errs + 1;
                ne = ne + 1;
            FSi;
        FSi;
        Si ( flag == 1 ) Entonces
            
            // Se porudce la salida si no hubo ningún error
            proc = proc + Subcadena( d, ind - 1 , 1 );
        FSi;
        i = i + size + 1;  
    Hasta ( i >= Longitud(t) );

    // Salida del texto decodificado
    Escribir("El texto decodificado es: " + proc );
FAcción;

Acción TokenSize( Entero j , Ref Entero s , string t )

    // Esta acción mide el tamaño de una subcadena en un string
    // su función es muy similar a la del cuantificador.

    // Inicialición del contador principal.
    s = 0;
    Repetir
        
        // Incremento del contador según las longitudes de las subacaenas
        // y los carcateres especificados.
        s = s + 1;
    Hasta ( Subcadena( t, j + s , 1 ) == " " O j + s > Longitud(t) );
FAcción;

Acción OutputStats( Entero n , string cp , Real tp , Entero ne , string m , string t )

    // Salida de datos estadísticos procesados a partir de datos intermedios.
    Escribir( "Cantidad de mensajes transmitidos: " + n
              + "Cantidad de palabras en cada mensaje (por separado): " 
              + cp + "Porcentaje de palabras por mensaje: "             );

         Si ( n =/= 0 ) Entonces

            //Se verifica un deniminador no nulo
            Escribir( ( tp / n ) * 100 + " %" );
             Sino

            // Mensaje por defecto.
            Escribir( "No se ha transmitido ningun mensaje." );
         FSi;
    Escribir( "Cantidad de errores transmitidos: " + ne
              + "Cadena(s) con el (los) mensaje(s) transmitido(s) en texto: " + t
              + "Cadena(s) con el (los) mensaje(s) transmitido(s) en morse: " + m );
FAcción;
            